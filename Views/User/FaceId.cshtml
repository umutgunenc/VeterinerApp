<h3 class="font-weight-bold text-white">
    FaceId <i class="fa-solid fa-user-pen"></i>
    <hr />
</h3>

<form asp-action="FaceId" asp-controller="User" method="post" enctype="multipart/form-data" id="SaveEdit">

    <!-- Kamera Akışı İçin Video -->
    <div class="form-group row mb-3 mx-3" id="cameraDiv" style="display:none">
        <video id="camera" autoplay class="col btn btn-dark rounded"></video>
    </div>

    <!-- Kalan Zamanı Göster -->
    <div id="timer" class="font-weight-bold text-white mb-3"></div>

    <!-- Fotoğraf Çekme Butonu -->
    <div class="form-group row mb-3 pl-2 pr-1 pr-md-0">
        <button type="button" id="take-photo" class="col btn btn-dark rounded mb-3 mx-3">Fotoğraf Çek</button>
    </div>

    <!-- Fotoğraf dosyasını gizli inputa aktarmak için multiple file input -->
    <input type="file" id="filePhoto" name="filePhoto" style="display: none;" multiple>
</form>

@if (TempData["EditUser"] != null)
{
    <div class="alert alert-success" id="successMessage">@TempData["EditUser"]</div>
}

@section scripts
{
    <script>
        const cameraDiv = document.getElementById('cameraDiv');
        const video = document.getElementById('camera');
        const takePhotoButton = document.getElementById('take-photo');
        const timerDisplay = document.getElementById('timer');
        let photos = [];  // Çekilen fotoğrafları saklayacağımız dizi

        // Fotoğraf Çekme İşlemi
        takePhotoButton.addEventListener('click', () => {
            // Kamera Erişimi
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia({ video: true })
                    .then(function (stream) {
                        takePhotoButton.disabled = true;
                        cameraDiv.style.display = 'block';  // Kamera div'ini göster
                        video.srcObject = stream;  // Video akışını başlat

                        photos = [];  // Yeni fotoğraflar için diziyi sıfırla
                        let photoCount = 20;  // Çekilecek fotoğraf sayısı
                        let interval = 250;  // Her fotoğraf arasında bekleme süresi (ms)
                        let totalTime = 5000; // Toplam süre (ms)
                        let remainingTime = totalTime; // Kalan süre

                        // Kalan zamanı gösteren sayaç
                        const timerInterval = setInterval(() => {
                            remainingTime -= 100; // Her 100 ms'de bir kalan süreyi güncelle
                            let seconds = Math.floor((remainingTime % 60000) / 1000);
                            let milliseconds = Math.floor((remainingTime % 1000) / 10);

                            if (remainingTime > 0) {
                                timerDisplay.innerHTML = `Kalan Süre: ${String(seconds).padStart(2, '0')}:${String(milliseconds).padStart(2, '0')}`;
                            } else {
                                cameraDiv.style.display = 'none'; // Divi gizle
                                timerDisplay.innerHTML = "Lütfen Bekleyiniz"; // Süre dolunca mesajı göster
                                clearInterval(timerInterval);
                                uploadPhotos();  // Fotoğraflar çekildikten sonra yükle
                            }
                        }, 100); // Her 100 ms'de bir zaman güncelle

                        // 5 saniye boyunca 20 fotoğraf çekmek için bir döngü oluştur
                        const takePhotos = () => {
                            let count = 0;
                            const captureInterval = setInterval(() => {
                                if (count < photoCount) {
                                    const canvas = document.createElement('canvas');
                                    canvas.width = video.videoWidth;
                                    canvas.height = video.videoHeight;
                                    const context = canvas.getContext('2d');
                                    context.drawImage(video, 0, 0, canvas.width, canvas.height);

                                    // Çekilen fotoğrafı canvas'tan al ve blob olarak photos dizisine ekle
                                    canvas.toBlob((blob) => {
                                        const file = new File([blob], `photo${photos.length + 1}.png`, { type: 'image/png' });
                                        photos.push(file);
                                    });

                                    count++;
                                } else {
                                    clearInterval(captureInterval);
                                }
                            }, interval);
                        };

                        // Fotoğraf çekme işlemini başlat
                        takePhotos();
                    })
                    .catch(function (error) {
                        console.error("Kamera erişimi sağlanamadı:", error);
                    });
            } else {
                console.error("Kamera erişimi bulunmamaktadır.");
            }
        });

        // Fotoğrafları Controller'a Gönderme
        function uploadPhotos() {
            const formData = new FormData();

            // Tüm fotoğrafları FormData'ya ekle
            photos.forEach((photo) => {
                formData.append('filePhoto', photo, photo.name);
            });

            // Fetch API ile POST isteği yapın
            fetch('/User/FaceId', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    // Sunucudan gelen mesajı göstermek için kalan süre alanını güncelle
                    timerDisplay.innerHTML = data.message;
                    takePhotoButton.disabled = false;
                })
                .catch((error) => {
                    console.error('Hata:', error);
                    timerDisplay.innerHTML = "Fotoğraflar yüklenirken bir hata oluştu."; // Hata mesajını göster
                });
        }
    </script>
}